//
//  TableViewController.swift
//  EmojiReader
//
//  Created by Kiri4of on 03.02.2022.
//

import UIKit

class TableViewController: UITableViewController {
    
    var objects = [
        Emoji(emoji: "ü•∞", name: "Love" , description: "Let's love each other"),
        Emoji(emoji: "üëª", name: "Ghost" , description: "Let's scare together"),
        Emoji(emoji: "ü§°", name: "Clown" , description: "Let's joke together")
    ] 
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        
        self.title = "Emoju Reader"
        self.navigationItem.leftBarButtonItem = self.editButtonItem
        //tableView.register(UITableViewCell.self, forCellReuseIdentifier: "cell")
    }
    @IBAction func unwindToViewController(_ unwindSegue: UIStoryboardSegue) {
        guard unwindSegue.identifier == "saveSegue" else {return} // —Å –∫–∞–∫–æ–≥–æ —Å–∏–≥–≤–µ—è –ø–µ—Ä–µ—Ö–æ–¥–∏–º
        
        guard let sourceViewController = unwindSegue.source as? NewEmojiTableViewController else {return}
        let emoji = sourceViewController.emoji
        if let selectedIndexPath = tableView.indexPathForSelectedRow { //–∏–Ω–¥–µ–∫—Å–ü–∞—Ñ –∑–∞–ø–∏—à–µ—Ç—Å—è —Ç–æ–≥–¥–∞ –∫–∞–∫ –Ω–∞–∂–º–µ—à—å –Ω–∞ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –∂–µ –Ω–µ, —Ç–æ –æ–Ω –±—É–¥–µ—Ç –ø—É—Å—Ç–æ–π
            objects[selectedIndexPath.row] = emoji
            tableView.reloadRows(at: [selectedIndexPath], with: .fade)
        } else {
        let newIndexPath = IndexPath(row: objects.count, section: 0)
        objects.append(emoji)
        tableView.insertRows(at: [newIndexPath], with: .fade) //–¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–æ –∞–¥—Ä–µ—Å—É(–∏–Ω–¥–µ–∫—Å–ü–∞—Ñ—É) / —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –ø–æ –∏–Ω–ª–µ–∫—Å–ü–∞—Ñ—É
            
        }
    }
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        super.prepare(for: segue, sender: sender)
        guard segue.identifier == "editEmojiSegue" else {return}
        let indexPath =  tableView.indexPathForSelectedRow! //—Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å–ü–∞—Ñ
        let emoji = objects[indexPath.row]
        let navigationVC = segue.destination as! UINavigationController //–¢–∫ –≤—Ç–æ—Ä–æ–π  —ç–∫—Ä–∞–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –ù–∞–≤–∏–≥–µ–π—à–Ω –ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä–µ
        let newEmojiVC = navigationVC.topViewController as! NewEmojiTableViewController
        newEmojiVC.emoji = emoji
        newEmojiVC.title = "Edit"
    }

    // MARK: - Table view data source
    
    override func numberOfSections(in tableView: UITableView) -> Int {
        
        return 1
    }
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        
        return objects.count
    }
    
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: "EmojiTableViewCell", for: indexPath) as? EmojiTableViewCell else {return UITableViewCell() }
        let object = objects[indexPath.row]
        cell.configurate(object: object)
        return cell
    }
    //delete
    override func tableView(_ tableView: UITableView,editingStyleForRowAt indexPath: IndexPath) -> UITableViewCell.EditingStyle {
        return .delete
    }
    
    override func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {     //–†–∞–∑—Ä–µ—à–∞–µ—Ç —É–¥–∞–ª—è—Ç—å
        if editingStyle == .delete {
            objects.remove(at: indexPath.row)
            tableView.deleteRows(at: [indexPath], with: .middle)
        }
    }
    //Move
    override func tableView(_ tableView: UITableView, canMoveRowAt indexPath: IndexPath) -> Bool {
        return true
    }
     
    override func tableView(_ tableView: UITableView, moveRowAt sourceIndexPath: IndexPath, to destinationIndexPath: IndexPath) {
        let movedEmoji = objects.remove(at: sourceIndexPath.row) //—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–Ω—ã–π –µ–ª–µ–º–µ–Ω—Ç
        objects.insert(movedEmoji, at: destinationIndexPath.row)//–≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ —Ç–æ —Å–∞–º–æ–µ –≤—Ä–µ–º—è
        tableView.reloadData()  //–ø–æ —Å—É—Ç–∏ –º—ã —Å–Ω–æ–≤–∞ –¥–µ–ª–∞–µ–º —è—á–µ–π–∫—É —É–∂–µ –∏–∑ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–µ
    }
    
    //swipe actions
    override func tableView(_ tableView: UITableView, leadingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration? {
        let done = doneAction(at: indexPath)
        let favorite = favoriteAction(at: indexPath)
        return UISwipeActionsConfiguration(actions: [done,favorite])
    }
    
    func doneAction(at indexPath: IndexPath) -> UIContextualAction {
        let action = UIContextualAction(style: .destructive, title: "Done") { action, view, complition in
            self.objects.remove(at: indexPath.row)
            self.tableView.deleteRows(at: [indexPath], with: .fade)
            complition(true) // –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∏–∫–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è–±, –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–≤–µ—Ä—à–∞—Ç—å—Å—è
        }
        action.backgroundColor = .systemGreen
        action.image = UIImage(systemName: "checkmark.circle")
        return action
    }
    
    func favoriteAction(at indexPath: IndexPath) -> UIContextualAction {
        var object = objects[indexPath.row]
        let action = UIContextualAction(style: .normal, title: "Fav", handler: { action, view, complition in
                object.isFavourite = !object.isFavourite
                self.objects[indexPath.row] = object //–¥–∞–±–∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–∞ —Ç–∞–∫ –º–∏ —Ä–∞–±–æ—Ç–∞–µ–º —Å –∫–æ–ø–∏–µ–π)
                complition(true)
        })
        action.backgroundColor = object.isFavourite ? .systemPurple : .systemGray //if else (—Ç–µ—Ä–Ω–∞—Ä–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä)
        action.image = UIImage(systemName: "heart")
        return action
    }

}
